From fb7cc99f8a8c5a1594cfa780807d5e75f4b9539e Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Tue, 7 Jul 2020 17:54:22 +1000
Subject: [PATCH] wbemprox: Add more Win32_PhysicalMemory properties.

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Signed-off-by: Hans Leidekker <hans@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/wbemprox/builtin.c     | 11 ++++++++++-
 dlls/wbemprox/tests/query.c |  4 ++++
 2 files changed, 14 insertions(+), 1 deletion(-)

diff --git a/dlls/wbemprox/builtin.c b/dlls/wbemprox/builtin.c
index 2ff3131936d..a94d41bfc45 100644
--- a/dlls/wbemprox/builtin.c
+++ b/dlls/wbemprox/builtin.c
@@ -270,12 +270,15 @@ static const struct column col_physicalmedia[] =
 };
 static const struct column col_physicalmemory[] =
 {
+    { L"BankLabel",            CIM_STRING },
     { L"Capacity",             CIM_UINT64 },
+    { L"Caption",              CIM_STRING },
     { L"ConfiguredClockSpeed", CIM_UINT32 },
     { L"DeviceLocator",        CIM_STRING },
     { L"FormFactor",           CIM_UINT16 },
     { L"MemoryType",           CIM_UINT16 },
     { L"PartNumber",           CIM_STRING },
+    { L"SerialNumber",         CIM_STRING },
 };
 static const struct column col_pnpentity[] =
 {
@@ -655,12 +658,15 @@ struct record_physicalmedia
 };
 struct record_physicalmemory
 {
+    const WCHAR *banklabel;
     UINT64       capacity;
+    const WCHAR *caption;
     UINT32       configuredclockspeed;
     const WCHAR *devicelocator;
     UINT16       formfactor;
     UINT16       memorytype;
     const WCHAR *partnumber;
+    const WCHAR *serial;
 };
 struct record_pnpentity
 {
@@ -2905,12 +2911,15 @@ static enum fill_status fill_physicalmemory( struct table *table, const struct e
     if (!resize_table( table, 1, sizeof(*rec) )) return FILL_STATUS_FAILED;
 
     rec = (struct record_physicalmemory *)table->data;
+    rec->banklabel            = L"BANK 0";
     rec->capacity             = get_total_physical_memory();
-    rec->configuredclockspeed = 0;
+    rec->caption              = L"Physical Memory";
+    rec->configuredclockspeed = 1600;
     rec->devicelocator        = L"DIMM 0";
     rec->formfactor           = 8; /* DIMM */
     rec->memorytype           = 9; /* RAM */
     rec->partnumber           = NULL;
+    rec->serial               = NULL;
     if (!match_row( table, row, cond, &status )) free_row_values( table, row );
     else row++;
 
diff --git a/dlls/wbemprox/tests/query.c b/dlls/wbemprox/tests/query.c
index 578e9308df7..7dcfd35e938 100644
--- a/dlls/wbemprox/tests/query.c
+++ b/dlls/wbemprox/tests/query.c
@@ -1159,10 +1159,14 @@ static void test_Win32_PhysicalMemory( IWbemServices *services )
 
     if (count > 0)
     {
+        check_property( obj, L"BankLabel", VT_BSTR, CIM_STRING );
         check_property( obj, L"Capacity", VT_BSTR, CIM_UINT64 );
+        check_property( obj, L"Caption", VT_BSTR, CIM_STRING );
         check_property( obj, L"DeviceLocator", VT_BSTR, CIM_STRING );
         check_property( obj, L"FormFactor", VT_I4, CIM_UINT16 );
         check_property( obj, L"MemoryType", VT_I4, CIM_UINT16 );
+        check_property( obj, L"PartNumber", VT_NULL, CIM_STRING );
+        check_property( obj, L"SerialNumber", VT_NULL, CIM_STRING );
         IWbemClassObject_Release( obj );
     }
     IEnumWbemClassObject_Release( result );
From 2ea3e40465f0530ad71c31e77c9727c00673d91f Mon Sep 17 00:00:00 2001
From: Esme Povirk <esme@codeweavers.com>
Date: Wed, 8 Jul 2020 12:26:01 +0200
Subject: [PATCH] wbemprox: Implement Win32_SoundDevice.Manufacturer.

Signed-off-by: Gijs Vermeulen <gijsvrm@gmail.com>
Signed-off-by: Hans Leidekker <hans@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/wbemprox/builtin.c | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/dlls/wbemprox/builtin.c b/dlls/wbemprox/builtin.c
index a94d41bfc45..f055547a6b9 100644
--- a/dlls/wbemprox/builtin.c
+++ b/dlls/wbemprox/builtin.c
@@ -376,9 +376,10 @@ static const struct column col_sid[] =
 };
 static const struct column col_sounddevice[] =
 {
-    { L"Name",        CIM_STRING },
-    { L"ProductName", CIM_STRING },
-    { L"StatusInfo",  CIM_UINT16 },
+    { L"Manufacturer", CIM_STRING },
+    { L"Name",         CIM_STRING },
+    { L"ProductName",  CIM_STRING },
+    { L"StatusInfo",   CIM_UINT16 },
 };
 static const struct column col_stdregprov[] =
 {
@@ -764,6 +765,7 @@ struct record_sid
 };
 struct record_sounddevice
 {
+    const WCHAR *manufacturer;
     const WCHAR *name;
     const WCHAR *productname;
     UINT16       statusinfo;
@@ -884,7 +886,7 @@ static const struct record_quickfixengineering data_quickfixengineering[] =
 };
 static const struct record_sounddevice data_sounddevice[] =
 {
-    { L"Wine Audio Device", L"Wine Audio Device", 3 /* enabled */ }
+    { L"The Wine Project", L"Wine Audio Device", L"Wine Audio Device", 3 /* enabled */ }
 };
 static const struct record_stdregprov data_stdregprov[] =
 {

From ee68f3e97e1b3711936b7703b6765fd526c859f1 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Wed, 22 Apr 2020 10:45:46 -0500
Subject: [PATCH 52/53] mk11_base

---
 dlls/ntdll/signal_x86_64.c | 11 ++++++++++-
 dlls/ws2_32/Makefile.in    |  1 +
 2 files changed, 11 insertions(+), 1 deletion(-)

diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
index c7c8b964056..d42d998a702 100644
--- a/dlls/ntdll/signal_x86_64.c
+++ b/dlls/ntdll/signal_x86_64.c
@@ -441,12 +441,21 @@ static NTSTATUS call_stack_handlers( EXCEPTION_RECORD *rec, CONTEXT *orig_contex
     UNWIND_HISTORY_TABLE table;
     DISPATCHER_CONTEXT dispatch;
     CONTEXT context;
+    MEMORY_BASIC_INFORMATION wine_frame_stack_info, current_stack_info;
+    int is_teb_frame_in_current_stack = 1;
     NTSTATUS status;
 
     context = *orig_context;
     dispatch.TargetIp      = 0;
     dispatch.ContextRecord = &context;
     dispatch.HistoryTable  = &table;
+
+    if ( !(NtQueryVirtualMemory(NtCurrentProcess(), teb_frame, MemoryBasicInformation, &wine_frame_stack_info, sizeof(MEMORY_BASIC_INFORMATION), NULL)) &&
+         !(NtQueryVirtualMemory(NtCurrentProcess(), (PVOID)context.Rsp, MemoryBasicInformation, &current_stack_info, sizeof(MEMORY_BASIC_INFORMATION), NULL)))
+    {
+        is_teb_frame_in_current_stack = wine_frame_stack_info.AllocationBase == current_stack_info.AllocationBase;
+    }
+
     for (;;)
     {
         status = virtual_unwind( UNW_FLAG_EHANDLER, &dispatch, &context );
@@ -492,7 +501,7 @@ static NTSTATUS call_stack_handlers( EXCEPTION_RECORD *rec, CONTEXT *orig_contex
             }
         }
         /* hack: call wine handlers registered in the tib list */
-        else while ((ULONG64)teb_frame < context.Rsp)
+        else if (is_teb_frame_in_current_stack) while ((ULONG64)teb_frame < context.Rsp)
         {
             TRACE( "found wine frame %p rsp %lx handler %p\n",
                     teb_frame, context.Rsp, teb_frame->Handler );
diff --git a/dlls/ws2_32/Makefile.in b/dlls/ws2_32/Makefile.in
index 9d7dfafeb3c..c7f24168dac 100644
--- a/dlls/ws2_32/Makefile.in
+++ b/dlls/ws2_32/Makefile.in
@@ -1,6 +1,7 @@
 EXTRADEFS = -DUSE_WS_PREFIX
 MODULE    = ws2_32.dll
 IMPORTLIB = ws2_32
+IMPORTS = kernelbase
 DELAYIMPORTS = iphlpapi user32
 EXTRALIBS = $(POLL_LIBS)
 
-- 
2.27.0

From 7bcaf094432a5eaf7bb47b6145e9f418ed164012 Mon Sep 17 00:00:00 2001
From: Pnevmoslon <psn8402@gmail.com>
Date: Wed, 27 May 2020 12:23:59 +0300
Subject: [PATCH 53/53] mk11 gamepad fix

---
 dlls/wbemprox/class.c | 23 +++++++++++++----------
 1 file changed, 13 insertions(+), 10 deletions(-)

diff --git a/dlls/wbemprox/class.c b/dlls/wbemprox/class.c
index ba7720b098d..6cc439c6fbc 100644
--- a/dlls/wbemprox/class.c
+++ b/dlls/wbemprox/class.c
@@ -116,6 +116,7 @@ static HRESULT WINAPI enum_class_object_Next(
     struct table *table;
     static int once = 0;
     HRESULT hr;
+    ULONG i;
 
     TRACE("%p, %d, %u, %p, %p\n", iface, lTimeout, uCount, apObjects, puReturned);
 
@@ -124,16 +125,18 @@ static HRESULT WINAPI enum_class_object_Next(
     if (lTimeout != WBEM_INFINITE && !once++) FIXME("timeout not supported\n");
 
     *puReturned = 0;
-    if (ec->index >= view->result_count) return WBEM_S_FALSE;
-
-    table = get_view_table( view, ec->index );
-    hr = create_class_object( table->name, iface, ec->index, NULL, apObjects );
-    if (hr != S_OK) return hr;
-
-    ec->index++;
-    *puReturned = 1;
-    if (ec->index == view->result_count && uCount > 1) return WBEM_S_FALSE;
-    if (uCount > 1) return WBEM_S_TIMEDOUT;
+    
+    for (i=0; i<uCount; ++i)
+    {
+        if (ec->index >= view->result_count) return WBEM_S_FALSE;
+        table = get_view_table( view, ec->index );
+        hr = create_class_object( table->name, iface, ec->index, NULL, apObjects );
+        if (hr != S_OK) return hr;
+
+        apObjects++;
+        ec->index++;
+        ++*puReturned;
+    }
     return WBEM_S_NO_ERROR;
 }
 
-- 
2.27.0

